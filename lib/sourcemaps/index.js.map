{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"../index.js","sourcesContent":["import * as path from 'path';\r\nimport { Gulp } from 'gulp';\r\nimport {\r\n    Operation, IAssertDist, IAsserts, ITaskInfo, PipeTask, IOperate, Pipe, CtxType\r\n    , TransformSource, task, ITaskContext, ITransform\r\n} from 'development-core';\r\nimport * as _ from 'lodash';\r\n// import * as chalk from 'chalk';\r\nconst cache = require('gulp-cached');\r\nconst ts = require('gulp-typescript');\r\nconst sourcemaps = require('gulp-sourcemaps');\r\nconst uglify = require('gulp-uglify');\r\n\r\n\r\n/**\r\n * typescript assert task option.\r\n *\r\n * @export\r\n * @interface ITsTaskOption\r\n * @extends {IAsserts}\r\n */\r\nexport interface ITsTaskOption extends IAsserts {\r\n    /**\r\n     * ts tsconfig.json file path.\r\n     *\r\n     * @type {CtxType<string>}\r\n     * @memberOf ITsTaskOption\r\n     */\r\n    tsconfigFile?: CtxType<string>;\r\n\r\n    /**\r\n     * ts compile ctx.\r\n     *\r\n     * @type {CtxType<any>}\r\n     * @memberof ITsTaskOption\r\n     */\r\n    tsconfig?: CtxType<any>;\r\n\r\n    /**\r\n     * zip compile js.\r\n     *\r\n     * @type {CtxType<boolean | Object>}\r\n     * @memberOf ITsTaskOption\r\n     */\r\n    uglify?: CtxType<boolean | Object>;\r\n\r\n    /**\r\n     * ts pipes tasks.\r\n     */\r\n    tsPipes: CtxType<Pipe[]>;\r\n\r\n    /**\r\n     * sourceMaps path.\r\n     *\r\n     * @type {boolean}\r\n     * @memberOf ITsTaskOption\r\n     */\r\n    sourceMaps?: CtxType<string | boolean>;\r\n\r\n    /**\r\n     * compile .tds define file.\r\n     */\r\n    withTDS?: CtxType<boolean>;\r\n}\r\n\r\n\r\n@task({\r\n    oper: Operation.default | Operation.autoWatch\r\n})\r\nexport class TsCompile extends PipeTask {\r\n    constructor(info: ITaskInfo) {\r\n        super(info)\r\n    }\r\n\r\n    getInfo() {\r\n        this.info.name = this.info.name || 'tscompile';\r\n        return this.info;\r\n    }\r\n\r\n    tsPipes(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): Pipe[] {\r\n        let option = <ITsTaskOption>ctx.option;\r\n        let pipes: Pipe[] = [\r\n            (ctx) => cache('typescript'),\r\n            (ctx) => sourcemaps.init()\r\n        ];\r\n        let tsps = ctx.to(option.tsPipes);\r\n        if (tsps && tsps.length > 0) {\r\n            pipes = pipes.concat(tsps);\r\n        }\r\n        pipes.push((ctx) => this.getTsProject(ctx));\r\n        return pipes;\r\n    }\r\n\r\n    source(ctx: ITaskContext, dist: IAssertDist, gulp: Gulp): TransformSource | Promise<TransformSource> {\r\n        let info = this.getInfo();\r\n        let source = gulp.src(ctx.getSrc(info));\r\n        let option = <ITsTaskOption>ctx.option;\r\n        return this.pipes2Promise(source, ctx, dist, gulp, this.tsPipes(ctx, dist, gulp))\r\n            .then(stream => {\r\n                let hastds = ctx.to(option.withTDS);\r\n\r\n                if (_.isUndefined(hastds) || _.isNull(hastds)) {\r\n                    hastds = (ctx.oper & Operation.release) > 0;\r\n                }\r\n                if (hastds === false) {\r\n                    return stream['js'];\r\n                } else {\r\n                    return [\r\n                        stream['js'],\r\n                        _.extend(stream['dts'], <IOperate>{ nonePipe: true })\r\n                    ]\r\n                }\r\n            });\r\n\r\n    }\r\n\r\n    pipes(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): Pipe[] {\r\n        let option = <ITsTaskOption>ctx.option;\r\n        let pipes: Pipe[] = [];\r\n\r\n        if (option.uglify) {\r\n            pipes.splice(0, 0, {\r\n                oper: Operation.deploy | Operation.release,\r\n                toTransform: (ctx) => {\r\n                    let uglifycfg = ctx.to(option.uglify);\r\n                    return _.isBoolean(uglifycfg) ? uglify() : uglify(uglifycfg);\r\n                }\r\n            });\r\n        }\r\n        pipes = pipes.concat(super.pipes(ctx, dist, gulp));\r\n        let smap = ctx.to(option.sourceMaps);\r\n        if (smap !== false) {\r\n            let mappath = (_.isBoolean(smap) || !smap) ? './sourcemaps' : smap;\r\n            pipes.push((ctx) => sourcemaps.write(mappath));\r\n        }\r\n        return pipes;\r\n    }\r\n\r\n    private getTsProject(ctx: ITaskContext): ITransform {\r\n        let option = <ITsTaskOption>ctx.option;\r\n        if (option.tsconfig) {\r\n            return ts(ctx.to(option.tsconfig));\r\n        } else {\r\n            let tsProject = ts.createProject(path.join(ctx.getRootPath() || '', ctx.to(option.tsconfigFile) || './tsconfig.json'));\r\n            return tsProject();\r\n        }\r\n    }\r\n}\r\n"]}