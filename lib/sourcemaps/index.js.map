{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"../index.js","sourcesContent":["import * as path from 'path';\r\nimport { Gulp } from 'gulp';\r\nimport {\r\n    Operation, IAssertDist, IAsserts, ITaskInfo, PipeTask, IOperate, Pipe\r\n    , TransformSource, task, ITaskContext, ITransform\r\n} from 'development-core';\r\nimport * as _ from 'lodash';\r\n// import * as chalk from 'chalk';\r\nconst cache = require('gulp-cached');\r\nconst ts = require('gulp-typescript');\r\nconst sourcemaps = require('gulp-sourcemaps');\r\nconst uglify = require('gulp-uglify');\r\n\r\n\r\n/**\r\n * typescript assert task option.\r\n *\r\n * @export\r\n * @interface ITsTaskOption\r\n * @extends {IAsserts}\r\n */\r\nexport interface ITsTaskOption extends IAsserts {\r\n    /**\r\n     * ts tsconfig.json file path.\r\n     *\r\n     * @type {sring}\r\n     * @memberOf ITsTaskOption\r\n     */\r\n    tsconfigFile?: string;\r\n    /**\r\n     * ts compile ctx.\r\n     *\r\n     * @type {*}\r\n     * @memberOf ITsTaskOption\r\n     */\r\n    tsconfig?: any;\r\n\r\n    /**\r\n     * zip compile js.\r\n     *\r\n     * @type {(boolean | Object)}\r\n     * @memberOf ITsTaskOption\r\n     */\r\n    uglify?: boolean | Object;\r\n\r\n    /**\r\n     * ts pipes tasks.\r\n     */\r\n    tsPipes: Pipe[];\r\n\r\n    /**\r\n     * babel 6 option.\r\n     *\r\n     * @type {*}\r\n     * @memberOf ITsTaskOption\r\n     */\r\n    babelOption: any;\r\n\r\n    /**\r\n     * sourceMaps path.\r\n     *\r\n     * @type {boolean}\r\n     * @memberOf ITsTaskOption\r\n     */\r\n    sourceMaps?: string | boolean;\r\n\r\n    /**\r\n     * compile .tds define file.\r\n     */\r\n    withTDS?: boolean;\r\n}\r\n\r\n\r\n@task({\r\n    oper: Operation.default | Operation.autoWatch\r\n})\r\nexport class TsCompile extends PipeTask {\r\n    constructor(info: ITaskInfo) {\r\n        super(info)\r\n    }\r\n\r\n    getInfo() {\r\n        this.info.name = this.info.name || 'tscompile';\r\n        return this.info;\r\n    }\r\n\r\n    tsPipes(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): Pipe[] {\r\n        let option = <ITsTaskOption>ctx.option;\r\n        let pipes: Pipe[] = [\r\n            (ctx) => cache('typescript'),\r\n            (ctx) => sourcemaps.init()\r\n        ];\r\n        if (option.tsPipes && option.tsPipes.length > 0) {\r\n            pipes = pipes.concat(option.tsPipes);\r\n        }\r\n        pipes.push((ctx) => this.getTsProject(ctx));\r\n        return pipes;\r\n    }\r\n\r\n    source(ctx: ITaskContext, dist: IAssertDist, gulp: Gulp): TransformSource | Promise<TransformSource> {\r\n        let info = this.getInfo();\r\n        let source = gulp.src(ctx.getSrc(info));\r\n        let option = <ITsTaskOption>ctx.option;\r\n        return this.pipes2Promise(source, ctx, dist, gulp, this.tsPipes(ctx, dist, gulp))\r\n            .then(stream => {\r\n                if (option.withTDS === false || (ctx.oper & Operation.build)) {\r\n                    return stream['js'];\r\n                } else {\r\n                    return [\r\n                        stream['js'],\r\n                        _.extend(stream['dts'], <IOperate>{ nonePipe: true })\r\n                    ]\r\n                }\r\n            });\r\n\r\n    }\r\n\r\n    pipes(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): Pipe[] {\r\n        let option = <ITsTaskOption>ctx.option;\r\n        let pipes: Pipe[] = [];\r\n\r\n        if (option.uglify) {\r\n            pipes.splice(0, 0, {\r\n                oper: Operation.deploy | Operation.release,\r\n                toTransform: (ctx) => _.isBoolean(option.uglify) ? uglify() : uglify(option.uglify)\r\n            });\r\n        }\r\n        pipes = pipes.concat(super.pipes(ctx, dist, gulp));\r\n        if (option.sourceMaps !== false) {\r\n            let mappath = (_.isBoolean(option.sourceMaps) || !option.sourceMaps) ? './sourcemaps' : option.sourceMaps;\r\n            pipes.push((ctx) => sourcemaps.write(mappath));\r\n        }\r\n        return pipes;\r\n    }\r\n\r\n    private getTsProject(ctx: ITaskContext): ITransform {\r\n        let option = <ITsTaskOption>ctx.option;\r\n        if (option.tsconfig) {\r\n            return ts(option.tsconfig);\r\n        } else {\r\n            let tsProject = ts.createProject(path.join(ctx.getRootPath() || '', option.tsconfigFile || './tsconfig.json'));\r\n            return tsProject();\r\n        }\r\n    }\r\n}\r\n"]}