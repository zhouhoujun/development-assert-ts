{"version":3,"sources":["index.js","index.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","_typeof","decorate","i","defineProperty","__metadata","k","v","metadata","path","require","development_core_1","cache","ts","sourcemaps","uglify","babel","TsTasks","_classCallCheck","this","_createClass","value","_this","name","oper","Operation","build","e2e","test","pipes","init","config","transform","getTsProject","transformSourcePipe","source","pipe","option","babelOption","presets","write","sourceMaps","release","deploy","output","tsmap","dt","gulp","dts","dest","getDist","js","watchTasks","tsconfig","tsProject","createProject","join","env","root","tsconfigFile","dynamicTask","exports"],"mappings":"AAAA,+kBACIA,WAA0C,SAAUC,EAAYC,EAAQC,EAAKC,GAC7E,GAA2HC,GAAvHC,EAAIC,UAAUC,OAAQC,EAAIH,EAAI,EAAIJ,EAAkB,OAATE,EAAgBA,EAAOM,OAAOC,yBAAyBT,EAAQC,GAAOC,CACrH,IAAuB,YAAnB,mBAAOQ,SAAP,YAAAC,QAAOD,WAAoD,kBAArBA,SAAQE,SAAyBL,EAAIG,QAAQE,SAASb,EAAYC,EAAQC,EAAKC,OACpH,KAAK,GAAIW,GAAId,EAAWO,OAAS,EAAGO,GAAK,EAAGA,KAASV,EAAIJ,EAAWc,MAAIN,GAAKH,EAAI,EAAID,EAAEI,GAAKH,EAAI,EAAID,EAAEH,EAAQC,EAAKM,GAAKJ,EAAEH,EAAQC,KAASM,EAChJ,OAAOH,GAAI,GAAKG,GAAKC,OAAOM,eAAed,EAAQC,EAAKM,GAAIA,GAE5DQ,WAA0C,SAAUC,EAAGC,GANvDnB,GAAc,YAAdA,mBAAAA,SAAAA,YAAAA,QAAAA,WAAoDC,kBAAzBD,SAAeoB,SAAsBlB,MAAQC,SAA9BiB,SAAyCF,EAAAC,ICD3EE,KAAIC,QAAM,QACtBC,mBAAAD,QAAmG,oBAE7FE,MAAQF,QAAQ,eAChBG,GAAKH,QAAQ,mBACbI,WAAaJ,QAAQ,mBACrBK,OAASL,QAAQ,eACjBM,MAAQN,QAAQ,cAqCtBO,QAAAA,WAAA,QAAAA,KAAAC,gBAAAC,KAAAF,GAAA,MAAAG,cAAAH,IAAA1B,IAAA,QAAA8B,MAAA,WAES,GAAAC,GAAAH,IACD,SAEQI,KAAM,YACNC,KAAMb,mBAAAc,UAAUC,MAAQf,mBAAAc,UAAUE,IAAMhB,mBAAAc,UAAUG,KAClDC,OACI,WAAA,MAAMjB,OAAM,eACZE,WAAWgB,KACX,SAACC,GACG,GAAIC,GAAYV,EAAKW,aAAaF,EAKlC,OAJAC,GAAUE,oBAAsB,SAACC,GAE7B,MAAOA,GAAOC,KAAKJ,GAAZ,IAEJA,GAEX,SAACD,GAAD,MAAYf,OAAsBe,EAAOM,OAAQC,cAAiBC,SAAU,aAC5E,SAACR,GAAD,MAAYjB,YAAW0B,MAAsBT,EAAOM,OAAQI,YAAc,oBAI9ElB,KAAM,YACNC,KAAMb,mBAAAc,UAAUiB,QAAU/B,mBAAAc,UAAUkB,OACpCd,OACI,WAAA,MAAMjB,OAAM,eACZE,WAAWgB,KACX,SAACC,GAAD,MAAYT,GAAKW,aAAaF,KAElCa,QACI,SAACC,EAAOd,EAAQe,EAAIC,GAApB,MAA6BF,GAAMG,IAAIZ,KAAKW,EAAKE,KAAKlB,EAAOmB,QAAQJ,MACrE,SAACD,EAAOd,EAAQe,EAAIC,GAApB,MAA6BF,GAAMM,GAAGf,KAAKpB,MAAsBe,EAAOM,OAAQC,cAAiBC,SAAU,aACtGH,KAAKrB,UAAUqB,KAAKtB,WAAW0B,MAAsBT,EAAOM,OAAQI,YAAc,iBAClFL,KAAKW,EAAKE,KAAKlB,EAAOmB,QAAQJ,SAIvCvB,KAAM,UACNC,KAAMb,mBAAAc,UAAUC,MAAQf,mBAAAc,UAAUE,IAAMhB,mBAAAc,UAAUG,KAClDwB,YAAa,kBAxC7B7D,IAAA,eAAA8B,MAAA,SA6CyBU,GACjB,GAAIM,GAAwBN,EAAOM,MACnC,IAAIA,EAAOgB,SACP,MAAOxC,IAAGwB,EAAOgB,SAEjB,IAAIC,GAAYzC,GAAG0C,cAAc9C,KAAK+C,KAAKzB,EAAO0B,IAAIC,MAAQ,GAAIrB,EAAOsB,cAAgB,mBACzF,OAAOL,SAnDnBrC,IADAA,SAAA7B,YAACuB,mBAAAiD,YACDvD,WAAA,yBAAAY,SAAa4C,QAAA5C,QAAOA","file":"../index.js","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst path = require('path');\nconst development_core_1 = require('development-core');\n// import * as chalk from 'chalk';\nconst cache = require('gulp-cached');\nconst ts = require('gulp-typescript');\nconst sourcemaps = require('gulp-sourcemaps');\nconst uglify = require('gulp-uglify');\nconst babel = require('gulp-babel');\nlet TsTasks = class TsTasks {\n    tasks() {\n        return [\n            {\n                name: 'tscompile',\n                oper: development_core_1.Operation.build | development_core_1.Operation.e2e | development_core_1.Operation.test,\n                pipes: [\n                        () => cache('typescript'),\n                    sourcemaps.init,\n                        (config) => {\n                        let transform = this.getTsProject(config);\n                        transform.transformSourcePipe = (source) => {\n                            // console.log('transformSourcePipe: work.')\n                            return source.pipe(transform)['js'];\n                        };\n                        return transform;\n                    },\n                        (config) => babel(config.option.babelOption || { presets: ['es2015'] }),\n                        (config) => sourcemaps.write(config.option.sourceMaps || './sourcemaps')\n                ]\n            },\n            {\n                name: 'tscompile',\n                oper: development_core_1.Operation.release | development_core_1.Operation.deploy,\n                pipes: [\n                        () => cache('typescript'),\n                    sourcemaps.init,\n                        (config) => this.getTsProject(config)\n                ],\n                output: [\n                        (tsmap, config, dt, gulp) => tsmap.dts.pipe(gulp.dest(config.getDist(dt))),\n                        (tsmap, config, dt, gulp) => tsmap.js.pipe(babel(config.option.babelOption || { presets: ['es2015'] }))\n                        .pipe(uglify()).pipe(sourcemaps.write(config.option.sourceMaps || './sourcemaps'))\n                        .pipe(gulp.dest(config.getDist(dt)))\n                ]\n            },\n            {\n                name: 'tswatch',\n                oper: development_core_1.Operation.build | development_core_1.Operation.e2e | development_core_1.Operation.test,\n                watchTasks: ['tscompile']\n            }\n        ];\n    }\n    getTsProject(config) {\n        let option = config.option;\n        if (option.tsconfig) {\n            return ts(option.tsconfig);\n        }\n        else {\n            let tsProject = ts.createProject(path.join(config.env.root || '', option.tsconfigFile || './tsconfig.json'));\n            return tsProject();\n        }\n    }\n};\nTsTasks = __decorate([\n    development_core_1.dynamicTask, \n    __metadata('design:paramtypes', [])\n], TsTasks);\nexports.TsTasks = TsTasks;\n","import * as path from 'path';\r\nimport { IDynamicTaskOption, Operation, ITaskConfig, IDynamicTasks, dynamicTask, ITransform } from 'development-core';\r\n// import * as chalk from 'chalk';\r\nconst cache = require('gulp-cached');\r\nconst ts = require('gulp-typescript');\r\nconst sourcemaps = require('gulp-sourcemaps');\r\nconst uglify = require('gulp-uglify');\r\nconst babel = require('gulp-babel');\r\n\r\n\r\n\r\nexport interface ITsTaskOption {\r\n    /**\r\n     * ts tsconfig.json file path.\r\n     * \r\n     * @type {sring}\r\n     * @memberOf ITsTaskOption\r\n     */\r\n    tsconfigFile?: string;\r\n    /**\r\n     * ts compile config.\r\n     * \r\n     * @type {*}\r\n     * @memberOf ITsTaskOption\r\n     */\r\n    tsconfig?: any;\r\n\r\n    /**\r\n     * babel 6 option.\r\n     * \r\n     * @type {*}\r\n     * @memberOf ITsTaskOption\r\n     */\r\n    babelOption: any;\r\n\r\n    /**\r\n     * sourceMaps path.\r\n     * \r\n     * @type {string}\r\n     * @memberOf ITsTaskOption\r\n     */\r\n    sourceMaps: string;\r\n}\r\n@dynamicTask\r\nexport class TsTasks implements IDynamicTasks {\r\n\r\n    tasks(): IDynamicTaskOption[] {\r\n        return [\r\n            {\r\n                name: 'tscompile',\r\n                oper: Operation.build | Operation.e2e | Operation.test,\r\n                pipes: [\r\n                    () => cache('typescript'),\r\n                    sourcemaps.init,\r\n                    (config) => {\r\n                        let transform = this.getTsProject(config);\r\n                        transform.transformSourcePipe = (source) => {\r\n                            // console.log('transformSourcePipe: work.')\r\n                            return source.pipe(transform)['js'];\r\n                        };\r\n                        return transform;\r\n                    },\r\n                    (config) => babel((<ITsTaskOption>config.option).babelOption || { presets: ['es2015'] }),\r\n                    (config) => sourcemaps.write((<ITsTaskOption>config.option).sourceMaps || './sourcemaps')\r\n                ]\r\n            },\r\n            {\r\n                name: 'tscompile',\r\n                oper: Operation.release | Operation.deploy,\r\n                pipes: [\r\n                    () => cache('typescript'),\r\n                    sourcemaps.init,\r\n                    (config) => this.getTsProject(config)\r\n                ],\r\n                output: [\r\n                    (tsmap, config, dt, gulp) => tsmap.dts.pipe(gulp.dest(config.getDist(dt))),\r\n                    (tsmap, config, dt, gulp) => tsmap.js.pipe(babel((<ITsTaskOption>config.option).babelOption || { presets: ['es2015'] }))\r\n                        .pipe(uglify()).pipe(sourcemaps.write((<ITsTaskOption>config.option).sourceMaps || './sourcemaps'))\r\n                        .pipe(gulp.dest(config.getDist(dt)))\r\n                ]\r\n            },\r\n            {\r\n                name: 'tswatch',\r\n                oper: Operation.build | Operation.e2e | Operation.test,\r\n                watchTasks: ['tscompile']\r\n            }\r\n        ];\r\n    }\r\n\r\n    private getTsProject(config: ITaskConfig): ITransform {\r\n        let option = <ITsTaskOption>config.option;\r\n        if (option.tsconfig) {\r\n            return ts(option.tsconfig);\r\n        } else {\r\n            let tsProject = ts.createProject(path.join(config.env.root || '', option.tsconfigFile || './tsconfig.json'));\r\n            return tsProject();\r\n        }\r\n    }\r\n}\r\n"]}