{"version":3,"sources":["index.ts"],"names":["path","require","development_core_1","_","cache","ts","sourcemaps","uglify","TsCompile","_super","info","call","this","__extends","prototype","getInfo","name","tsPipes","ctx","dist","gulp","_this","option","pipes","init","length","concat","push","getTsProject","source","src","getSrc","pipes2Promise","then","stream","oper","Operation","build","extend","nonePipe","write","sourceMaps","isUndefined","splice","deploy","release","toTransform","isBoolean","tsconfig","tsProject","createProject","join","env","root","tsconfigFile","__decorate","task","default","autoWatch","PipeTask","exports"],"mappings":"2sBAAYA,KAAIC,QAAM,QAEtBC,mBAAAD,QAGO,oBACKE,EAACF,QAAM,UAEbG,MAAQH,QAAQ,eAChBI,GAAKJ,QAAQ,mBACbK,WAAaL,QAAQ,mBACrBM,OAASN,QAAQ,eA4DvBO,UAAA,SAAAC,GACI,QAAAD,GAAYE,GACRD,EAAAE,KAAAC,KAAMF,GAkEd,MApE+BG,WAAAL,EAAAC,GAK3BD,EAAAM,UAAAC,QAAA,WAEI,MADAH,MAAKF,KAAKM,KAAOJ,KAAKF,KAAKM,MAAQ,YAC5BJ,KAAKF,MAGhBF,EAAAM,UAAAG,QAAA,SAAQC,EAAmBC,EAAmBC,GAA9C,GAAAC,GAAAT,KACQU,EAAwBJ,EAAII,OAC5BC,GACA,SAACL,GAAQ,MAAAd,OAAM,eACf,SAACc,GAAQ,MAAAZ,YAAWkB,QAMxB,OAJIF,GAAOL,SAAWK,EAAOL,QAAQQ,OAAS,GAC1CF,EAAMG,OAAOJ,EAAOL,SAExBM,EAAMI,KAAK,SAACT,GAAQ,MAAAG,GAAKO,aAAaV,KAC/BK,GAGXf,EAAAM,UAAAe,OAAA,SAAOX,EAAmBC,EAAmBC,GACzC,GAAIV,GAAOE,KAAKG,UACZc,EAAST,EAAKU,IAAIZ,EAAIa,OAAOrB,GAEjC,OAAOE,MAAKoB,cAAcH,EAAQX,EAAKC,EAAMC,EAAMR,KAAKK,QAAQC,EAAKC,EAAMC,IACtEa,KAAK,SAAAC,GACF,MAAIhB,GAAIiB,KAAOjC,mBAAAkC,UAAUC,MACdH,EAAW,IAGdA,EAAW,GACX/B,EAAEmC,OAAOJ,EAAY,KAAeK,UAAU,QAOlE/B,EAAAM,UAAAS,MAAA,SAAML,EAAmBC,EAAmBC,GACxC,GAAIE,GAAwBJ,EAAII,OAC5BC,GACA,SAACL,GAAQ,MAAAZ,YAAWkC,MAAMlB,EAAOmB,YAAc,iBAYnD,OATItC,GAAEuC,YAAYpB,EAAOf,UACrBe,EAAOf,QAAS,GAEhBe,EAAOf,QACPgB,EAAMoB,OAAO,EAAG,GACZR,KAAMjC,mBAAAkC,UAAUQ,OAAS1C,mBAAAkC,UAAUS,QACnCC,YAAa,SAAC5B,GAAQ,MAAAf,GAAE4C,UAAUzB,EAAOf,QAAUA,SAAWA,OAAOe,EAAOf,WAG7EgB,EAAMG,OAAOjB,EAAAK,UAAMS,MAAKZ,KAAAC,KAACM,EAAKC,EAAMC,KAGvCZ,EAAAM,UAAAc,aAAR,SAAqBV,GACjB,GAAII,GAAwBJ,EAAII,MAChC,IAAIA,EAAO0B,SACP,MAAO3C,IAAGiB,EAAO0B,SAEjB,IAAIC,GAAY5C,GAAG6C,cAAclD,KAAKmD,KAAKjC,EAAIkC,IAAIC,MAAQ,GAAI/B,EAAOgC,cAAgB,mBACtF,OAAOL,MApEnBzC,EAAA+C,YAACrD,mBAAAsD,MACGrB,KAAMjC,mBAAAkC,UAAUqB,QAAUvD,mBAAAkC,UAAUsB,0DAETxD,mBAAAyD,SAAlBC,SAAApD,UAASA","file":"../index.js","sourcesContent":["import * as path from 'path';\r\nimport { Gulp } from 'gulp';\r\nimport {\r\n    Operation, IAssertDist, IAsserts, ITaskInfo, PipeTask, IOperate, Pipe\r\n    , TransformSource, task, ITaskContext, ITransform\r\n} from 'development-core';\r\nimport * as _ from 'lodash';\r\n// import * as chalk from 'chalk';\r\nconst cache = require('gulp-cached');\r\nconst ts = require('gulp-typescript');\r\nconst sourcemaps = require('gulp-sourcemaps');\r\nconst uglify = require('gulp-uglify');\r\n\r\n\r\n/**\r\n * typescript assert task option.\r\n * \r\n * @export\r\n * @interface ITsTaskOption\r\n * @extends {IAsserts}\r\n */\r\nexport interface ITsTaskOption extends IAsserts {\r\n    /**\r\n     * ts tsconfig.json file path.\r\n     * \r\n     * @type {sring}\r\n     * @memberOf ITsTaskOption\r\n     */\r\n    tsconfigFile?: string;\r\n    /**\r\n     * ts compile ctx.\r\n     * \r\n     * @type {*}\r\n     * @memberOf ITsTaskOption\r\n     */\r\n    tsconfig?: any;\r\n\r\n    /**\r\n     * zip compile js.\r\n     * \r\n     * @type {(boolean | Object)}\r\n     * @memberOf ITsTaskOption\r\n     */\r\n    uglify?: boolean | Object;\r\n\r\n    /**\r\n     * ts pipes tasks.\r\n     */\r\n    tsPipes: Pipe[];\r\n\r\n    /**\r\n     * babel 6 option.\r\n     * \r\n     * @type {*}\r\n     * @memberOf ITsTaskOption\r\n     */\r\n    babelOption: any;\r\n\r\n    /**\r\n     * sourceMaps path.\r\n     * \r\n     * @type {string}\r\n     * @memberOf ITsTaskOption\r\n     */\r\n    sourceMaps?: string;\r\n}\r\n\r\n\r\n@task({\r\n    oper: Operation.default | Operation.autoWatch\r\n})\r\nexport class TsCompile extends PipeTask {\r\n    constructor(info: ITaskInfo) {\r\n        super(info)\r\n    }\r\n\r\n    getInfo() {\r\n        this.info.name = this.info.name || 'tscompile';\r\n        return this.info;\r\n    }\r\n\r\n    tsPipes(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): Pipe[] {\r\n        let option = <ITsTaskOption>ctx.option;\r\n        let pipes: Pipe[] = [\r\n            (ctx) => cache('typescript'),\r\n            (ctx) => sourcemaps.init()\r\n        ];\r\n        if (option.tsPipes && option.tsPipes.length > 0) {\r\n            pipes.concat(option.tsPipes);\r\n        }\r\n        pipes.push((ctx) => this.getTsProject(ctx));\r\n        return pipes;\r\n    }\r\n\r\n    source(ctx: ITaskContext, dist: IAssertDist, gulp: Gulp): TransformSource | Promise<TransformSource> {\r\n        let info = this.getInfo();\r\n        let source = gulp.src(ctx.getSrc(info));\r\n\r\n        return this.pipes2Promise(source, ctx, dist, gulp, this.tsPipes(ctx, dist, gulp))\r\n            .then(stream => {\r\n                if (ctx.oper & Operation.build) {\r\n                    return stream['js'];\r\n                } else {\r\n                    return [\r\n                        stream['js'],\r\n                        _.extend(stream['dts'], <IOperate>{ nonePipe: true })\r\n                    ]\r\n                }\r\n            });\r\n\r\n    }\r\n\r\n    pipes(ctx: ITaskContext, dist: IAssertDist, gulp?: Gulp): Pipe[] {\r\n        let option = <ITsTaskOption>ctx.option;\r\n        let pipes: Pipe[] = [\r\n            (ctx) => sourcemaps.write(option.sourceMaps || './sourcemaps')\r\n        ];\r\n\r\n        if (_.isUndefined(option.uglify)) {\r\n            option.uglify = true;\r\n        }\r\n        if (option.uglify) {\r\n            pipes.splice(0, 0, {\r\n                oper: Operation.deploy | Operation.release,\r\n                toTransform: (ctx) => _.isBoolean(option.uglify) ? uglify() : uglify(option.uglify)\r\n            });\r\n        }\r\n        return pipes.concat(super.pipes(ctx, dist, gulp));\r\n    }\r\n\r\n    private getTsProject(ctx: ITaskContext): ITransform {\r\n        let option = <ITsTaskOption>ctx.option;\r\n        if (option.tsconfig) {\r\n            return ts(option.tsconfig);\r\n        } else {\r\n            let tsProject = ts.createProject(path.join(ctx.env.root || '', option.tsconfigFile || './tsconfig.json'));\r\n            return tsProject();\r\n        }\r\n    }\r\n}\r\n"]}