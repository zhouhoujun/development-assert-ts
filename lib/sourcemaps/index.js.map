{"version":3,"sources":["index.js","index.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__metadata","k","v","metadata","path","require","development_core_1","cache","ts","sourcemaps","uglify","babel","TsTasks","name","oper","Operation","build","e2e","test","pipes","init","config","transform","getTsProject","transformSourcePipe","source","pipe","option","babelOption","presets","write","sourceMaps","release","deploy","output","tsmap","dt","gulp","dts","dest","getDist","js","watchTasks","tsconfig","tsProject","createProject","join","env","root","tsconfigFile","dynamicTask","exports"],"mappings":"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","file":"../index.js","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst path = require('path');\nconst development_core_1 = require('development-core');\n// import * as chalk from 'chalk';\nconst cache = require('gulp-cached');\nconst ts = require('gulp-typescript');\nconst sourcemaps = require('gulp-sourcemaps');\nconst uglify = require('gulp-uglify');\nconst babel = require('gulp-babel');\nlet TsTasks = class TsTasks {\n    tasks() {\n        return [\n            {\n                name: 'tscompile',\n                oper: development_core_1.Operation.build | development_core_1.Operation.e2e | development_core_1.Operation.test,\n                pipes: [\n                        () => cache('typescript'),\n                    sourcemaps.init,\n                        (config) => {\n                        let transform = this.getTsProject(config);\n                        transform.transformSourcePipe = (source) => {\n                            // console.log('transformSourcePipe: work.')\n                            return source.pipe(transform)['js'];\n                        };\n                        return transform;\n                    },\n                        (config) => babel(config.option.babelOption || { presets: ['es2015'] }),\n                        (config) => sourcemaps.write(config.option.sourceMaps || './sourcemaps')\n                ]\n            },\n            {\n                name: 'tscompile',\n                oper: development_core_1.Operation.release | development_core_1.Operation.deploy,\n                pipes: [\n                        () => cache('typescript'),\n                    sourcemaps.init,\n                        (config) => this.getTsProject(config)\n                ],\n                output: [\n                        (tsmap, config, dt, gulp) => tsmap.dts.pipe(gulp.dest(config.getDist(dt))),\n                        (tsmap, config, dt, gulp) => tsmap.js.pipe(babel(config.option.babelOption || { presets: ['es2015'] }))\n                        .pipe(uglify()).pipe(sourcemaps.write(config.option.sourceMaps || './sourcemaps'))\n                        .pipe(gulp.dest(config.getDist(dt)))\n                ]\n            },\n            {\n                name: 'tswatch',\n                oper: development_core_1.Operation.build | development_core_1.Operation.e2e | development_core_1.Operation.test,\n                watchTasks: ['tscompile']\n            }\n        ];\n    }\n    getTsProject(config) {\n        let option = config.option;\n        if (option.tsconfig) {\n            return ts(option.tsconfig);\n        }\n        else {\n            let tsProject = ts.createProject(path.join(config.env.root || '', option.tsconfigFile || './tsconfig.json'));\n            return tsProject();\n        }\n    }\n};\nTsTasks = __decorate([\n    development_core_1.dynamicTask, \n    __metadata('design:paramtypes', [])\n], TsTasks);\nexports.TsTasks = TsTasks;\n","import * as path from 'path';\r\nimport { IDynamicTaskOption, Operation, ITaskConfig, IDynamicTasks, dynamicTask, ITransform } from 'development-core';\r\n// import * as chalk from 'chalk';\r\nconst cache = require('gulp-cached');\r\nconst ts = require('gulp-typescript');\r\nconst sourcemaps = require('gulp-sourcemaps');\r\nconst uglify = require('gulp-uglify');\r\nconst babel = require('gulp-babel');\r\n\r\n\r\n\r\nexport interface ITsTaskOption {\r\n    /**\r\n     * ts tsconfig.json file path.\r\n     * \r\n     * @type {sring}\r\n     * @memberOf ITsTaskOption\r\n     */\r\n    tsconfigFile?: string;\r\n    /**\r\n     * ts compile config.\r\n     * \r\n     * @type {*}\r\n     * @memberOf ITsTaskOption\r\n     */\r\n    tsconfig?: any;\r\n\r\n    /**\r\n     * babel 6 option.\r\n     * \r\n     * @type {*}\r\n     * @memberOf ITsTaskOption\r\n     */\r\n    babelOption: any;\r\n\r\n    /**\r\n     * sourceMaps path.\r\n     * \r\n     * @type {string}\r\n     * @memberOf ITsTaskOption\r\n     */\r\n    sourceMaps: string;\r\n}\r\n@dynamicTask\r\nexport class TsTasks implements IDynamicTasks {\r\n\r\n    tasks(): IDynamicTaskOption[] {\r\n        return [\r\n            {\r\n                name: 'tscompile',\r\n                oper: Operation.build | Operation.e2e | Operation.test,\r\n                pipes: [\r\n                    () => cache('typescript'),\r\n                    sourcemaps.init,\r\n                    (config) => {\r\n                        let transform = this.getTsProject(config);\r\n                        transform.transformSourcePipe = (source) => {\r\n                            // console.log('transformSourcePipe: work.')\r\n                            return source.pipe(transform)['js'];\r\n                        };\r\n                        return transform;\r\n                    },\r\n                    (config) => babel((<ITsTaskOption>config.option).babelOption || { presets: ['es2015'] }),\r\n                    (config) => sourcemaps.write((<ITsTaskOption>config.option).sourceMaps || './sourcemaps')\r\n                ]\r\n            },\r\n            {\r\n                name: 'tscompile',\r\n                oper: Operation.release | Operation.deploy,\r\n                pipes: [\r\n                    () => cache('typescript'),\r\n                    sourcemaps.init,\r\n                    (config) => this.getTsProject(config)\r\n                ],\r\n                output: [\r\n                    (tsmap, config, dt, gulp) => tsmap.dts.pipe(gulp.dest(config.getDist(dt))),\r\n                    (tsmap, config, dt, gulp) => tsmap.js.pipe(babel((<ITsTaskOption>config.option).babelOption || { presets: ['es2015'] }))\r\n                        .pipe(uglify()).pipe(sourcemaps.write((<ITsTaskOption>config.option).sourceMaps || './sourcemaps'))\r\n                        .pipe(gulp.dest(config.getDist(dt)))\r\n                ]\r\n            },\r\n            {\r\n                name: 'tswatch',\r\n                oper: Operation.build | Operation.e2e | Operation.test,\r\n                watchTasks: ['tscompile']\r\n            }\r\n        ];\r\n    }\r\n\r\n    private getTsProject(config: ITaskConfig): ITransform {\r\n        let option = <ITsTaskOption>config.option;\r\n        if (option.tsconfig) {\r\n            return ts(option.tsconfig);\r\n        } else {\r\n            let tsProject = ts.createProject(path.join(config.env.root || '', option.tsconfigFile || './tsconfig.json'));\r\n            return tsProject();\r\n        }\r\n    }\r\n}\r\n"]}